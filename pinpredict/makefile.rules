##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS :=

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := pinpredict

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),ia32)
    TEST_TOOL_ROOTS += 
endif

# Place intel64-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),intel64)
    TEST_TOOL_ROOTS += 
endif

###### Place OS-specific definitions here ######

# Linux
ifeq ($(TARGET_OS),linux)
    TEST_TOOL_ROOTS += 
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS += 
    endif
endif

# Mac
ifeq ($(TARGET_OS),mac)
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS += 
    endif
endif

###### Handle exceptions here ######

# topopcode can't be compiled on 64b Windows
ifeq ($(TARGET_OS)-$(TARGET),windows-intel64)
    TEST_TOOL_ROOTS := $(TEST_TOOL_ROOTS:topopcode=)
endif

# We can't compile the get_source_app application on Windows due to a cygwin bug.
# For details see: http://cygwin.com/ml/cygwin/2008-08/msg00157.html.
ifeq ($(TARGET_OS),windows)
    TEST_TOOL_ROOTS := $(TEST_TOOL_ROOTS:get_source_location=)
    APP_ROOTS := $(APP_ROOTS:get_source_app=)
endif

# TODO: These tests fail on Mac - fix and remove the following:
ifeq ($(TARGET_OS),mac)
    TEST_TOOL_ROOTS := $(TEST_TOOL_ROOTS:get_source_location=)
endif

# TODO: These tests did not run before the changes - fix and remove the following:
TEST_TOOL_ROOTS := $(TEST_TOOL_ROOTS:fence=)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special applications' build rules ######

